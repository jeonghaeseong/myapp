{"version":3,"sources":["components/ReadExcel.js","serviceWorker.js","index.js"],"names":["extractionString","str","replace","ReadExcel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","words","showRow","question","questionState","excelToJson","bind","assertThisInitialized","startWordTest","nextWord","confirmWord","e","files","f","target","reader","FileReader","that","onload","data","result","workbook","Xlsx","read","type","sheet","console","log","Sheets","key","row","col","english","h","korea","readAsBinaryString","length","alert","a","j","x","i","Math","floor","random","shuffle","_this2","confirmAlert","title","message","buttons","label","onClick","setState","_this3","react_default","createElement","className","value","onChange","name","checked","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_ReadExcel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98020d3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Xlsx from 'xlsx';\r\nimport './ReadExcel.css';\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\r\n\r\n// 숫자 추출\r\nfunction extractionNumber(str) {\r\n    return str.replace(/[^0-9]/g,\"\");\r\n}\r\n\r\n// 문자 추출\r\nfunction extractionString(str) {\r\n    return str.replace(/[0-9]/gi,\"\");\r\n}\r\n\r\nfunction shuffle(a) {\r\n\r\n    var j, x, i;\r\n    for (i = a.length; i; i -= 1) {\r\n        j = Math.floor(Math.random() * i);\r\n        x = a[i - 1];\r\n        a[i - 1] = a[j];\r\n        a[j] = x;\r\n    }\r\n}\r\n\r\nclass ReadExcel extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { words: [], showRow: 0, question: {}, questionState: 'Q' };\r\n\r\n        this.excelToJson = this.excelToJson.bind(this);\r\n        this.startWordTest = this.startWordTest.bind(this);\r\n        this.nextWord = this.nextWord.bind(this);\r\n        this.confirmWord = this.confirmWord.bind(this);\r\n    }\r\n\r\n    excelToJson(e, files) {\r\n\r\n        var rABS = true;\r\n\r\n        var files = e.target.files, f = files[0];\r\n        var reader = new FileReader();\r\n\r\n        var that = this;\r\n\r\n        reader.onload = function(e) {\r\n            var data = e.target.result;\r\n            if(!rABS) data = new Uint8Array(data);\r\n            var workbook = Xlsx.read(data, {type: rABS ? 'binary' : 'array'});\r\n\r\n            /* DO SOMETHING WITH workbook HERE */\r\n            console.log(that.state);\r\n            \r\n            for(var sheet in workbook.Sheets) {\r\n                \r\n                for(var key in workbook.Sheets[sheet]) {\r\n                    \r\n                    var row = extractionNumber(key) - 1;\r\n                    var col = extractionString(key);\r\n\r\n                    if(col == 'A') {\r\n\r\n                        if(that.state.words[row]) {\r\n                            that.state.words[row].english = workbook.Sheets[sheet][key].h;\r\n                        }\r\n                        else {\r\n                            that.state.words[row] = { english: workbook.Sheets[sheet][key].h, korea: '' };\r\n                        }\r\n                    }\r\n                    else if(col == 'B') {\r\n\r\n                        if(that.state.words[row]) {\r\n                            that.state.words[row].korea = workbook.Sheets[sheet][key].h;\r\n                        }\r\n                        else {\r\n                            that.state.words[row] = { english: '', korea: workbook.Sheets[sheet][key].h };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        \r\n        if(rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n    }\r\n\r\n    // 시험 시작\r\n    startWordTest() {\r\n\r\n        console.log('시험 시작');\r\n\r\n        if(this.state.words.length <= 0) {\r\n            alert('영어 단어를 업로드 하세요.');\r\n            return;\r\n        }\r\n\r\n        shuffle(this.state.words);  // 단어 섞기\r\n        \r\n        this.nextWord();\r\n    }\r\n\r\n    nextWord() {\r\n        console.log('다음 단어');\r\n        \r\n\r\n        if(this.state.words.length == this.state.showRow) {\r\n            \r\n            confirmAlert({\r\n                title: '확인',\r\n                message: '단어 시험이 끝났습니다. 다시 하시려면 시작 버튼을 누르세요.',\r\n                buttons: [{\r\n                    label: '확인',\r\n                    onClick: () => { \r\n\r\n                        // 상태값 초기화\r\n                        this.setState((state, props) => ({\r\n                            showRow : 0,\r\n                            question: {},\r\n                            questionState: 'Q'\r\n                        }));\r\n                        return;\r\n                        // this.startWordTest(); \r\n                    }\r\n                }\r\n                // , {\r\n                //     label: '아니오',\r\n                //     onClick: () => { return; }\r\n                // }\r\n                ]\r\n            });\r\n        }\r\n        else {\r\n            this.setState((state, props) => ({\r\n                question: state.words[state.showRow],\r\n                showRow : state.showRow+=1,\r\n                questionState: 'Q'\r\n            }));\r\n        }\r\n    }\r\n\r\n    confirmWord() {\r\n        this.setState({\r\n            questionState: 'A'\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let question;\r\n\r\n        console.log(this.state.question.english, this.state.question.korea);\r\n\r\n        if(this.state.question.english && this.state.question.korea) {\r\n            question = (\r\n                <div>\r\n                    <div>{ this.state.question.english }</div>\r\n                    <div className={ this.state.questionState == \"Q\" ? \"hide\" : \"show\" } >{ this.state.question.korea }</div>\r\n                    <input type=\"button\" value={ this.state.questionState == \"Q\" ? \"확인\" : \"다음\" } onClick={ this.state.questionState == \"Q\" ? this.confirmWord : this.nextWord } />\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            question = <div></div>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <input type=\"file\" onChange={ (e) => this.excelToJson(e, e.target.files) } />\r\n                    <input type=\"radio\" name=\"abc\" value=\"Y\" checked={true} />단어/뜻\r\n                    <input type=\"radio\" name=\"abc\" value=\"N\" />뜻/단어\r\n                    <input type=\"button\" value=\"시작\" onClick={ this.startWordTest } />\r\n                    <input type=\"button\" value=\"종료\" />\r\n                </div>\r\n                <div id=\"area\">\r\n                    {question}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n}\r\n\r\nexport default ReadExcel;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ReadExcel from './components/ReadExcel';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ReadExcel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}